{"version":3,"sources":["/home/ibm-nht-wave2/Desktop/musixfrontend/node_modules/ngx-audio-player/fesm2015/ngx-audio-player.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sHA2DE;iCAC+B,AAE9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAiEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;y2CAyGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAsC4C,AAM3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kvBAmBD;;;;;;;;;;;;;;;;;;;;;2CAqByC,AAMxC;;;;;;;;;;;;;;;EAaD,qHAGuB;;;;;;;;wFAKvB;mCACiC,AAQhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDACsB","file":"ngx-audio-player.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { Injectable, ViewChild, ElementRef, Input, Component, Pipe, NgModule } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\n\nlet AudioPlayerService = class AudioPlayerService {\n    constructor() {\n        this.playlist = [];\n        this.indexSong = 0;\n        this.currentTrack = new BehaviorSubject(this.playlist[this.indexSong]);\n        this.currentTime = 0;\n        this.duration = 0;\n    }\n    init() {\n        this.updateCurrentSong();\n    }\n    nextSong() {\n        if ((this.indexSong + 1) >= this.playlist.length) {\n            this.indexSong = 0;\n        }\n        else {\n            this.indexSong++;\n        }\n        this.updateCurrentSong();\n    }\n    previousSong() {\n        if ((this.indexSong - 1) < 0) {\n            this.indexSong = (this.playlist.length - 1);\n        }\n        else {\n            this.indexSong--;\n        }\n        this.updateCurrentSong();\n    }\n    resetPlaylist() {\n        this.indexSong = 0;\n        this.updateCurrentSong();\n    }\n    selectATrack(index) {\n        this.indexSong = index - 1;\n        this.updateCurrentSong();\n    }\n    updateCurrentSong() {\n        const current = this.playlist[this.indexSong];\n        const previous = ((this.indexSong - 1) >= 0) ? this.playlist[this.indexSong - 1] : this.playlist[this.playlist.length - 1];\n        const next = ((this.indexSong + 1) >= this.playlist.length) ? this.playlist[0] : this.playlist[this.indexSong + 1];\n        this.currentTrack.next([\n            previous,\n            current,\n            next\n        ]);\n    }\n    getSubjectCurrentTrack() {\n        return this.currentTrack;\n    }\n    getPlaylist() {\n        return this.playlist;\n    }\n    setPlaylist(playlist) {\n        this.playlist = playlist;\n    }\n    getIndexSong() {\n        return this.indexSong;\n    }\n};\nAudioPlayerService = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [])\n], AudioPlayerService);\n\nclass BaseAudioPlayerFunctions {\n    constructor() {\n        this.loaderDisplay = false;\n        this.isPlaying = false;\n        this.currentTime = 0;\n        this.volume = 0.1;\n        this.duration = 0.01;\n    }\n    currTimePosChanged(event) {\n        this.player.nativeElement.currentTime = event.value;\n    }\n    bindPlayerEvent() {\n        this.player.nativeElement.addEventListener('playing', () => {\n            this.isPlaying = true;\n            this.duration = Math.floor(this.player.nativeElement.duration);\n        });\n        this.player.nativeElement.addEventListener('pause', () => {\n            this.isPlaying = false;\n        });\n        this.player.nativeElement.addEventListener('timeupdate', () => {\n            this.currentTime = Math.floor(this.player.nativeElement.currentTime);\n        });\n        this.player.nativeElement.addEventListener('volume', () => {\n            this.volume = Math.floor(this.player.nativeElement.volume);\n        });\n        this.player.nativeElement.addEventListener('loadstart', () => {\n            this.loaderDisplay = true;\n        });\n        this.player.nativeElement.addEventListener('loadeddata', () => {\n            this.loaderDisplay = false;\n            this.duration = Math.floor(this.player.nativeElement.duration);\n        });\n    }\n    playBtnHandler() {\n        if (this.loaderDisplay) {\n            return;\n        }\n        if (this.player.nativeElement.paused) {\n            this.player.nativeElement.play(this.currentTime);\n        }\n        else {\n            this.currentTime = this.player.nativeElement.currentTime;\n            this.player.nativeElement.pause();\n        }\n    }\n    play() {\n        setTimeout(() => {\n            this.player.nativeElement.play();\n        }, 0);\n    }\n    toggleVolume() {\n        if (this.volume === 0) {\n            this.setVolume(1.0);\n        }\n        else {\n            this.setVolume(0);\n        }\n    }\n    setVolume(vol) {\n        this.volume = vol;\n        this.player.nativeElement.volume = this.volume;\n    }\n}\n__decorate([\n    ViewChild('audioPlayer', { static: true }),\n    __metadata(\"design:type\", ElementRef)\n], BaseAudioPlayerFunctions.prototype, \"player\", void 0);\n\nlet MatAdvancedAudioPlayerComponent = class MatAdvancedAudioPlayerComponent extends BaseAudioPlayerFunctions {\n    constructor(playlistService) {\n        super();\n        this.playlistService = playlistService;\n        this.displayedColumns = ['title', 'status'];\n        this.dataSource = new MatTableDataSource();\n        this.displayTitle = true;\n        this.displayPlaylist = true;\n        this.pageSizeOptions = [10, 20, 30];\n        this.expanded = true;\n        this.autoPlay = false;\n        this.displayVolumeControls = true;\n    }\n    ngOnInit() {\n        this.setDataSourceAttributes();\n        this.bindPlayerEvent();\n        this.player.nativeElement.addEventListener('ended', () => {\n            if (this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\n                this.nextSong();\n            }\n        });\n        this.playlistService.setPlaylist(this.playlistData);\n        this.playlistService.getSubjectCurrentTrack().subscribe((playlistTrack) => {\n            this.playlistTrack = playlistTrack;\n        });\n        this.player.nativeElement.currentTime = 0;\n        this.playlistService.init();\n        if (this.autoPlay) {\n            super.play();\n        }\n    }\n    set matPaginator(mp) {\n        this.paginator = mp;\n        this.setDataSourceAttributes();\n    }\n    setDataSourceAttributes() {\n        let index = 1;\n        if (this.playlistData) {\n            this.playlistData.forEach(data => {\n                data.index = index++;\n            });\n            this.dataSource = new MatTableDataSource(this.playlistData);\n            this.dataSource.paginator = this.paginator;\n        }\n    }\n    nextSong() {\n        if (this.displayPlaylist == true\n            && (((this.playlistService.indexSong + 1) % this.paginator.pageSize) === 0\n                || (this.playlistService.indexSong + 1) === this.paginator.length)) {\n            if (this.paginator.hasNextPage()) {\n                this.paginator.nextPage();\n            }\n            else if (!this.paginator.hasNextPage()) {\n                this.paginator.firstPage();\n            }\n        }\n        this.currentTime = 0;\n        this.duration = 0.01;\n        this.playlistService.nextSong();\n        this.play();\n    }\n    previousSong() {\n        this.currentTime = 0;\n        this.duration = 0.01;\n        if (!this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\n            if (this.displayPlaylist == true\n                && (((this.playlistService.indexSong) % this.paginator.pageSize) === 0\n                    || (this.playlistService.indexSong) === 0)) {\n                if (this.paginator.hasPreviousPage()) {\n                    this.paginator.previousPage();\n                }\n                else if (!this.paginator.hasPreviousPage()) {\n                    this.paginator.lastPage();\n                }\n            }\n            this.playlistService.previousSong();\n        }\n        else {\n            this.resetSong();\n        }\n        this.play();\n    }\n    resetSong() {\n        this.player.nativeElement.src = this.playlistTrack[1].link;\n    }\n    selectTrack(index) {\n        console.log('selectTrack(index: number): void: ' + index);\n        this.playlistService.selectATrack(index);\n        setTimeout(() => {\n            this.player.nativeElement.play();\n        }, 0);\n    }\n    checkIfSongHasStartedSinceAtleastTwoSeconds() {\n        return this.player.nativeElement.currentTime > 2;\n    }\n    set playlist(playlist) {\n        this.playlistData = playlist;\n        this.ngOnInit();\n    }\n};\nMatAdvancedAudioPlayerComponent.ctorParameters = () => [\n    { type: AudioPlayerService }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], MatAdvancedAudioPlayerComponent.prototype, \"displayTitle\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], MatAdvancedAudioPlayerComponent.prototype, \"displayPlaylist\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], MatAdvancedAudioPlayerComponent.prototype, \"pageSizeOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], MatAdvancedAudioPlayerComponent.prototype, \"expanded\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], MatAdvancedAudioPlayerComponent.prototype, \"autoPlay\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], MatAdvancedAudioPlayerComponent.prototype, \"displayVolumeControls\", void 0);\n__decorate([\n    ViewChild(MatPaginator, { static: false }),\n    __metadata(\"design:type\", MatPaginator),\n    __metadata(\"design:paramtypes\", [MatPaginator])\n], MatAdvancedAudioPlayerComponent.prototype, \"matPaginator\", null);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array),\n    __metadata(\"design:paramtypes\", [Array])\n], MatAdvancedAudioPlayerComponent.prototype, \"playlist\", null);\nMatAdvancedAudioPlayerComponent = __decorate([\n    Component({\n        selector: 'mat-advanced-audio-player',\n        template: \"<mat-card class=\\\"d-flex justify-content-center ngx-advanced-audio-player z-depth-1 mat-elevation-z2\\\" style=\\\"margin: 0px;\\\">\\n  \\n  <audio [src]=\\\"playlistTrack[1].link\\\" #audioPlayer></audio>\\n\\n    <button class=\\\"p-1\\\" mat-button (click)='previousSong();'\\n      [disabled]=\\\"loaderDisplay\\\">\\n      <mat-icon aria-hidden=\\\"true\\\">\\n        <!-- Skip previous icon (skip_previous) -->\\n        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M6 6h2v12H6zm3.5 6l8.5 6V6z\\\"/><path d=\\\"M0 0h32v32H0z\\\" fill=\\\"none\\\"/></svg>\\n      </mat-icon>\\n    </button>\\n    <button mat-button class=\\\"p-1 play-pause\\\" (click)='playBtnHandler();' [disabled]=\\\"loaderDisplay\\\">\\n        <mat-icon *ngIf=\\\"!loaderDisplay && !isPlaying\\\" class=\\\"play-track\\\" aria-hidden=\\\"true\\\">\\n          <!-- Play icon (play_arrow) -->\\n          <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8 5v14l11-7z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/></svg>\\n        </mat-icon>\\n        <mat-icon *ngIf=\\\"!loaderDisplay && isPlaying\\\" class=\\\"pause-track\\\" aria-hidden=\\\"true\\\">\\n          <!-- Pause icon (pause) -->\\n          <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/></svg>\\n        </mat-icon>\\n    </button>\\n    <button mat-button class=\\\"p-1 skip-next\\\" (click)='nextSong();' [disabled]=\\\"loaderDisplay\\\">\\n      <mat-icon class=\\\"next-track\\\" aria-hidden=\\\"true\\\">\\n        <!-- Skip next icon (skip_next) -->\\n        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/></svg>\\n      </mat-icon>\\n    </button>\\n\\n  <div class=\\\"col\\\">\\n    <div class=\\\"d-flex flex-fill justify-content-center\\\">\\n      <div class=\\\"d-none d-sm-block py-3 px-1\\\" style=\\\"font-size: 12px\\\">\\n        <span *ngIf=\\\"duration !== 0.01\\\">\\n          {{currentTime | secondsToMinutes}}\\n        </span>\\n      </div>\\n      <mat-slider class=\\\"d-none d-sm-block flex-fill p-1\\\" style=\\\"width: 100%\\\" min=\\\"0\\\" max=\\\"{{duration}}\\\" value=\\\"{{currentTime}}\\\"\\n        (change)=\\\"currTimePosChanged($event)\\\"></mat-slider>\\n\\n      <div class=\\\"py-3 px-1\\\" style=\\\"font-size: 12px; text-align: right\\\">\\n        <span *ngIf=\\\"duration !== 0.01\\\">\\n          -{{duration-currentTime | secondsToMinutes }}\\n        </span>\\n      </div>\\n    </div>\\n  </div>\\n  <button *ngIf=\\\"displayVolumeControls\\\" mat-button class=\\\"p-1 volume\\\" (click)='toggleVolume();'>\\n    <mat-icon *ngIf=\\\"volume === 0\\\" class=\\\"volume-mute\\\" aria-hidden=\\\"true\\\">\\n      <!-- Volume mute icon (volume_off) -->\\n      <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"28\\\" height=\\\"28\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/></svg>\\n    </mat-icon>\\n    <mat-icon *ngIf=\\\"volume > 0\\\" class=\\\"volume-up\\\" aria-hidden=\\\"true\\\">\\n      <!-- Volume up icon (volume_up) -->\\n      <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"28\\\" height=\\\"28\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/></svg>\\n    </mat-icon>\\n  </button>\\n</mat-card>\\n\\n<mat-card *ngIf=\\\"displayTitle\\\" class=\\\"mat-elevation-z1\\\">\\n  <div style=\\\"text-align: center;\\\">\\n    <div style=\\\"margin: 1px 2px; padding: 1em\\\">\\n      <span *ngIf=\\\"!isPlaying\\\">{{ playlistTrack[1].title }}</span>\\n      <marquee *ngIf=\\\"isPlaying\\\" behavior=\\\"scroll\\\" direction=\\\"left\\\">{{ playlistTrack[1].title }}</marquee>\\n    </div>\\n    <div class=\\\"clear\\\"></div>\\n  </div>\\n</mat-card>\\n\\n<mat-accordion *ngIf=\\\"displayPlaylist\\\">\\n  <mat-expansion-panel [expanded]=\\\"expanded\\\">\\n    <mat-expansion-panel-header>\\n      Play List\\n    </mat-expansion-panel-header>\\n    <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z6\\\">\\n      <ng-container matColumnDef=\\\"title\\\">\\n        <th mat-header-cell *matHeaderCellDef> Title </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" (click)=\\\"selectTrack(element.index)\\\"> {{element.title}} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"status\\\">\\n        <th mat-header-cell *matHeaderCellDef> </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <div *ngIf=\\\"playlistTrack[1].title === element.title\\\">\\n            <!-- <mat-icon *ngIf=\\\"isPlaying\\\" aria-hidden=\\\"true\\\">\\n              <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/></svg>\\n            </mat-icon> -->\\n            <mat-icon class=\\\"currently-playing\\\" *ngIf=\\\"isPlaying\\\" aria-hidden=\\\"true\\\">\\n              <!-- Play icon (play_arrow) -->\\n              <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\"><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/><path d=\\\"M12 3v9.28c-.47-.17-.97-.28-1.5-.28C8.01 12 6 14.01 6 16.5S8.01 21 10.5 21c2.31 0 4.2-1.75 4.45-4H15V6h4V3h-7z\\\"/></svg>\\n            </mat-icon>\\n          </div>\\n        </td>\\n      </ng-container>\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr class=\\\"mat-select-content\\\" mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n    <mat-paginator [pageSizeOptions]=\\\"pageSizeOptions\\\" showFirstLastButtons></mat-paginator>\\n  </mat-expansion-panel>\\n</mat-accordion>\",\n        styles: [\"@import url(https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.2.1/css/bootstrap-grid.min.css);mat-card{padding:0!important;background:rgba(0,0,0,.02)}mat-slider{max-height:30px}table{width:100%}button:focus,button:hover{outline:0!important}.ngx-advanced-audio-player{min-width:325px}.mat-icon{height:32px!important;width:32px!important}.material-icons{font-size:16px!important}mat-icon>.currently-playing{height:16px!important;width:16px!important}.play-pause{border-left:2px solid rgba(0,0,0,.1);border-right:2px solid rgba(0,0,0,.1)}.volume{border-left:2px solid rgba(0,0,0,.1)}.skip-next{border-right:2px solid rgba(0,0,0,.1)}\"]\n    }),\n    __metadata(\"design:paramtypes\", [AudioPlayerService])\n], MatAdvancedAudioPlayerComponent);\n\nlet MatBasicAudioPlayerComponent = class MatBasicAudioPlayerComponent extends BaseAudioPlayerFunctions {\n    constructor() {\n        super();\n        this.displayTitle = false;\n        this.autoPlay = false;\n        this.displayVolumeControls = true;\n    }\n    ngOnInit() {\n        this.bindPlayerEvent();\n        if (this.autoPlay) {\n            super.play();\n        }\n    }\n    resetSong() {\n        this.player.nativeElement.src = this.audioUrl;\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], MatBasicAudioPlayerComponent.prototype, \"title\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], MatBasicAudioPlayerComponent.prototype, \"audioUrl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], MatBasicAudioPlayerComponent.prototype, \"displayTitle\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], MatBasicAudioPlayerComponent.prototype, \"autoPlay\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], MatBasicAudioPlayerComponent.prototype, \"displayVolumeControls\", void 0);\nMatBasicAudioPlayerComponent = __decorate([\n    Component({\n        selector: 'mat-basic-audio-player',\n        template: \"<mat-card class=\\\"d-flex ngx-basic-audio-player z-depth-1 mat-elevation-z1\\\">\\n    <audio [src]=\\\"audioUrl\\\" #audioPlayer></audio>\\n    <button mat-button (click)='playBtnHandler();' class=\\\"ngx-basic-audio-player-button-handler\\\"\\n        style=\\\"font-size: 14px!important;\\\" [disabled]=\\\"loaderDisplay\\\">\\n            <mat-icon *ngIf=\\\"!loaderDisplay && !isPlaying\\\" class=\\\"play-track\\\" aria-hidden=\\\"true\\\">\\n                <!-- Play icon (play_arrow) -->\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M8 5v14l11-7z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/></svg>\\n            </mat-icon>\\n            <mat-icon *ngIf=\\\"!loaderDisplay && isPlaying\\\" class=\\\"pause-track\\\" aria-hidden=\\\"true\\\">\\n                <!-- Pause icon (pause) -->\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/></svg>\\n            </mat-icon>\\n    </button>\\n    <div class=\\\"flex-fill pl-1 ngx-basic-audio-player-slider\\\">\\n        <mat-slider style=\\\"width: 100%\\\" min=\\\"0\\\" max=\\\"{{duration}}\\\" value=\\\"{{currentTime}}\\\"\\n            (change)=\\\"currTimePosChanged($event)\\\"></mat-slider>\\n    </div>\\n    <div class=\\\"d-flex ngx-basic-audio-player-duration\\\">\\n        <span *ngIf=\\\"duration !== 0.01\\\" class=\\\"pl-2 pr-3 my-auto\\\" style=\\\"font-size: 14px!important;\\\">\\n            -{{duration-currentTime |\\n            secondsToMinutes }}\\n        </span>\\n    </div>\\n    <button *ngIf=\\\"displayVolumeControls\\\" mat-button (click)='toggleVolume();'\\n        style=\\\"padding: 0px!important; min-width:48px!important;\\\">\\n        <mat-icon *ngIf=\\\"volume === 0\\\" class=\\\"volume-mute\\\" aria-hidden=\\\"true\\\">\\n            <!-- Volume mute icon (volume_off) -->\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"28\\\" height=\\\"28\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/></svg>\\n          </mat-icon>\\n          <mat-icon *ngIf=\\\"volume > 0\\\" class=\\\"volume-up\\\" aria-hidden=\\\"true\\\">\\n            <!-- Volume up icon (volume_up) -->\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"28\\\" height=\\\"28\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/></svg>\\n          </mat-icon>\\n    </button>\\n</mat-card>\\n\\n<mat-card class=\\\"z-depth-1 mat-elevation-z1\\\" *ngIf=\\\"displayTitle && title !== ''\\\">\\n    <div style=\\\"text-align: center;\\\">\\n        <div style=\\\"margin: 1px 2px; padding: 1em\\\">\\n            {{ title }}\\n        </div>\\n    </div>\\n</mat-card>\",\n        styles: [\"@import url(https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.2.1/css/bootstrap-grid.min.css);mat-card,mat-slider{padding:0!important}button:focus,button:hover{outline:0!important}.ngx-basic-audio-player{min-width:300px}svg{vertical-align:top}.mat-icon{height:32px!important;width:32px!important}.material-icons{font-size:32px!important}mat-card{background:rgba(0,0,0,.02)}\"]\n    }),\n    __metadata(\"design:paramtypes\", [])\n], MatBasicAudioPlayerComponent);\n\n/*\n * Transform seconds to minutes:seconds\n * Example : 270 -> 02:30\n*/\nlet SecondsToMinutesPipe = class SecondsToMinutesPipe {\n    transform(time) {\n        const minutes = ('0' + Math.floor(time / 60)).slice(-2);\n        const seconds = ('0' + time % 60).slice(-2);\n        return `${minutes}:${seconds}`;\n    }\n};\nSecondsToMinutesPipe = __decorate([\n    Pipe({ name: 'secondsToMinutes' })\n], SecondsToMinutesPipe);\n\nlet NgxAudioPlayerModule = class NgxAudioPlayerModule {\n    constructor() {\n    }\n};\nNgxAudioPlayerModule = __decorate([\n    NgModule({\n        declarations: [MatBasicAudioPlayerComponent, SecondsToMinutesPipe, MatAdvancedAudioPlayerComponent],\n        imports: [CommonModule, FormsModule, MatButtonModule, MatCardModule, MatTableModule, MatFormFieldModule,\n            MatSliderModule, MatExpansionModule, MatPaginatorModule, MatIconModule],\n        exports: [MatBasicAudioPlayerComponent, MatAdvancedAudioPlayerComponent],\n        providers: [AudioPlayerService]\n    }),\n    __metadata(\"design:paramtypes\", [])\n], NgxAudioPlayerModule);\n\nclass Track {\n}\n\n/*\n * Public API Surface of ngx-audio-player\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatAdvancedAudioPlayerComponent, MatBasicAudioPlayerComponent, NgxAudioPlayerModule, Track, BaseAudioPlayerFunctions as ɵa, AudioPlayerService as ɵb, SecondsToMinutesPipe as ɵc };\n"]}