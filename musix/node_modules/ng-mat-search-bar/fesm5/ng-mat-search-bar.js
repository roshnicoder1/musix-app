import { __extends, __decorate } from 'tslib';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { CommonModule } from '@angular/common';
import { EventEmitter, ViewChild, Input, Output, Component, forwardRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatRippleModule } from '@angular/material/core';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { trigger, state, style, transition, animate } from '@angular/animations';

var AbstractControlValueAccessor = /** @class */ (function () {
    function AbstractControlValueAccessor() {
        /**
         * Invoked when the model has been changed
         */
        this.onChange = function (_) { };
        /**
         * Invoked when the model has been touched
         */
        this.onTouched = function () { };
    }
    /**
     * Method that is invoked on an update of a model.
     */
    AbstractControlValueAccessor.prototype.updateChanges = function () {
        this.onChange(this.value);
    };
    /**
     * Writes a new item to the element.
     * @param value the value
     */
    AbstractControlValueAccessor.prototype.writeValue = function (value) {
        this.value = value;
        this.updateChanges();
    };
    /**
     * Registers a callback function that should be called when the control's value changes in the UI.
     * @param fn
     */
    AbstractControlValueAccessor.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * Registers a callback function that should be called when the control receives a blur event.
     * @param fn
     */
    AbstractControlValueAccessor.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    return AbstractControlValueAccessor;
}());

var DISPLAY_TYPE;
(function (DISPLAY_TYPE) {
    DISPLAY_TYPE[DISPLAY_TYPE["SIMPLE"] = 0] = "SIMPLE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROL"] = 1] = "FORMCONTROL";
    DISPLAY_TYPE[DISPLAY_TYPE["AUTOCOMPLETE"] = 2] = "AUTOCOMPLETE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROLANDAUTOCOMPLETE"] = 3] = "FORMCONTROLANDAUTOCOMPLETE";
})(DISPLAY_TYPE || (DISPLAY_TYPE = {}));
var MatSearchBarComponent = /** @class */ (function (_super) {
    __extends(MatSearchBarComponent, _super);
    function MatSearchBarComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.DISPLAY_TYPE = DISPLAY_TYPE;
        _this.placeholder = '';
        _this.onBlur = new EventEmitter();
        _this.onClose = new EventEmitter();
        _this.onEnter = new EventEmitter();
        _this.onFocus = new EventEmitter();
        _this.onOpen = new EventEmitter();
        _this.searchVisible = false;
        return _this;
    }
    MatSearchBarComponent_1 = MatSearchBarComponent;
    MatSearchBarComponent.prototype.ngOnInit = function () {
        if (!this.formControl && !this.matAutocomplete)
            this.mode = DISPLAY_TYPE.SIMPLE;
        else if (this.formControl && this.matAutocomplete)
            this.mode = DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE;
        else if (this.formControl)
            this.mode = DISPLAY_TYPE.FORMCONTROL;
        else if (this.matAutocomplete)
            this.mode = DISPLAY_TYPE.AUTOCOMPLETE;
    };
    MatSearchBarComponent.prototype.close = function () {
        this.searchVisible = false;
        this.value = '';
        this.updateChanges();
        this.onClose.emit();
    };
    MatSearchBarComponent.prototype.open = function () {
        this.searchVisible = true;
        this.inputElement.nativeElement.focus();
        this.onOpen.emit();
    };
    MatSearchBarComponent.prototype.onBlurring = function (searchValue) {
        if (!searchValue) {
            this.searchVisible = false;
        }
        this.onBlur.emit(searchValue);
    };
    MatSearchBarComponent.prototype.onEnterring = function (searchValue) {
        this.onEnter.emit(searchValue);
    };
    MatSearchBarComponent.prototype.onFocussing = function (searchValue) {
        this.onFocus.emit(searchValue);
    };
    var MatSearchBarComponent_1;
    __decorate([
        ViewChild('input', { static: false })
    ], MatSearchBarComponent.prototype, "inputElement", void 0);
    __decorate([
        Input()
    ], MatSearchBarComponent.prototype, "formControl", void 0);
    __decorate([
        Input()
    ], MatSearchBarComponent.prototype, "matAutocomplete", void 0);
    __decorate([
        Input()
    ], MatSearchBarComponent.prototype, "placeholder", void 0);
    __decorate([
        Output()
    ], MatSearchBarComponent.prototype, "onBlur", void 0);
    __decorate([
        Output()
    ], MatSearchBarComponent.prototype, "onClose", void 0);
    __decorate([
        Output()
    ], MatSearchBarComponent.prototype, "onEnter", void 0);
    __decorate([
        Output()
    ], MatSearchBarComponent.prototype, "onFocus", void 0);
    __decorate([
        Output()
    ], MatSearchBarComponent.prototype, "onOpen", void 0);
    MatSearchBarComponent = MatSearchBarComponent_1 = __decorate([
        Component({
            selector: 'mat-search-bar',
            template: "<ng-container [ngSwitch]=\"mode\">\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.AUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROL\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchDefault\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n</ng-container>\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>\n    close\n  </mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>\n    search\n  </mat-icon>\n</span>\n",
            animations: [
                trigger('slideInOut', [
                    state('true', style({ width: '*' })),
                    state('false', style({ width: '0' })),
                    transition('true => false', animate('300ms ease-in')),
                    transition('false => true', animate('300ms ease-out'))
                ])
            ],
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return MatSearchBarComponent_1; }),
                    multi: true
                }
            ],
            styles: [":host{position:relative;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;-webkit-box-pack:end;justify-content:flex-end;width:24px;height:24px}.mat-search_field{position:absolute;z-index:1;padding:0 24px 0 0}.mat-search_icons{display:block;margin:0;padding:0;position:absolute;top:0;left:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{-webkit-transition:.2s cubic-bezier(.4,0,.2,1);transition:.2s cubic-bezier(.4,0,.2,1);position:absolute;top:0;left:0;z-index:2;border-radius:50%}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;-webkit-transform:rotate(225deg);transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;z-index:3;visibility:visible;-webkit-transform:rotate(360deg);transform:rotate(360deg)}"]
        })
    ], MatSearchBarComponent);
    return MatSearchBarComponent;
}(AbstractControlValueAccessor));

var NgMatSearchBarModule = /** @class */ (function () {
    function NgMatSearchBarModule() {
    }
    NgMatSearchBarModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                FormsModule,
                MatAutocompleteModule,
                MatIconModule,
                MatInputModule,
                MatRippleModule,
                //Reactive form
                ReactiveFormsModule
            ],
            exports: [MatSearchBarComponent],
            declarations: [MatSearchBarComponent]
        })
    ], NgMatSearchBarModule);
    return NgMatSearchBarModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { NgMatSearchBarModule, MatSearchBarComponent as ɵa, AbstractControlValueAccessor as ɵb };
//# sourceMappingURL=ng-mat-search-bar.js.map
