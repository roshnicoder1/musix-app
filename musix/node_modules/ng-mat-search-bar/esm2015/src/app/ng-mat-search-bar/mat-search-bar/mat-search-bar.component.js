import * as tslib_1 from "tslib";
var MatSearchBarComponent_1;
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { AbstractControlValueAccessor } from '../util/abstract-value-accessor';
export var DISPLAY_TYPE;
(function (DISPLAY_TYPE) {
    DISPLAY_TYPE[DISPLAY_TYPE["SIMPLE"] = 0] = "SIMPLE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROL"] = 1] = "FORMCONTROL";
    DISPLAY_TYPE[DISPLAY_TYPE["AUTOCOMPLETE"] = 2] = "AUTOCOMPLETE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROLANDAUTOCOMPLETE"] = 3] = "FORMCONTROLANDAUTOCOMPLETE";
})(DISPLAY_TYPE || (DISPLAY_TYPE = {}));
let MatSearchBarComponent = MatSearchBarComponent_1 = class MatSearchBarComponent extends AbstractControlValueAccessor {
    constructor() {
        super(...arguments);
        this.DISPLAY_TYPE = DISPLAY_TYPE;
        this.placeholder = '';
        this.onBlur = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onEnter = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.searchVisible = false;
    }
    ngOnInit() {
        if (!this.formControl && !this.matAutocomplete)
            this.mode = DISPLAY_TYPE.SIMPLE;
        else if (this.formControl && this.matAutocomplete)
            this.mode = DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE;
        else if (this.formControl)
            this.mode = DISPLAY_TYPE.FORMCONTROL;
        else if (this.matAutocomplete)
            this.mode = DISPLAY_TYPE.AUTOCOMPLETE;
    }
    close() {
        this.searchVisible = false;
        this.value = '';
        this.updateChanges();
        this.onClose.emit();
    }
    open() {
        this.searchVisible = true;
        this.inputElement.nativeElement.focus();
        this.onOpen.emit();
    }
    onBlurring(searchValue) {
        if (!searchValue) {
            this.searchVisible = false;
        }
        this.onBlur.emit(searchValue);
    }
    onEnterring(searchValue) {
        this.onEnter.emit(searchValue);
    }
    onFocussing(searchValue) {
        this.onFocus.emit(searchValue);
    }
};
tslib_1.__decorate([
    ViewChild('input', { static: false })
], MatSearchBarComponent.prototype, "inputElement", void 0);
tslib_1.__decorate([
    Input()
], MatSearchBarComponent.prototype, "formControl", void 0);
tslib_1.__decorate([
    Input()
], MatSearchBarComponent.prototype, "matAutocomplete", void 0);
tslib_1.__decorate([
    Input()
], MatSearchBarComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Output()
], MatSearchBarComponent.prototype, "onBlur", void 0);
tslib_1.__decorate([
    Output()
], MatSearchBarComponent.prototype, "onClose", void 0);
tslib_1.__decorate([
    Output()
], MatSearchBarComponent.prototype, "onEnter", void 0);
tslib_1.__decorate([
    Output()
], MatSearchBarComponent.prototype, "onFocus", void 0);
tslib_1.__decorate([
    Output()
], MatSearchBarComponent.prototype, "onOpen", void 0);
MatSearchBarComponent = MatSearchBarComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'mat-search-bar',
        template: "<ng-container [ngSwitch]=\"mode\">\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.AUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROL\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchDefault\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n</ng-container>\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>\n    close\n  </mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>\n    search\n  </mat-icon>\n</span>\n",
        animations: [
            trigger('slideInOut', [
                state('true', style({ width: '*' })),
                state('false', style({ width: '0' })),
                transition('true => false', animate('300ms ease-in')),
                transition('false => true', animate('300ms ease-out'))
            ])
        ],
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => MatSearchBarComponent_1),
                multi: true
            }
        ],
        styles: [":host{position:relative;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;-webkit-box-pack:end;justify-content:flex-end;width:24px;height:24px}.mat-search_field{position:absolute;z-index:1;padding:0 24px 0 0}.mat-search_icons{display:block;margin:0;padding:0;position:absolute;top:0;left:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{-webkit-transition:.2s cubic-bezier(.4,0,.2,1);transition:.2s cubic-bezier(.4,0,.2,1);position:absolute;top:0;left:0;z-index:2;border-radius:50%}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;-webkit-transform:rotate(225deg);transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;z-index:3;visibility:visible;-webkit-transform:rotate(360deg);transform:rotate(360deg)}"]
    })
], MatSearchBarComponent);
export { MatSearchBarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlYXJjaC1iYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbWF0LXNlYXJjaC1iYXIvIiwic291cmNlcyI6WyJzcmMvYXBwL25nLW1hdC1zZWFyY2gtYmFyL21hdC1zZWFyY2gtYmFyL21hdC1zZWFyY2gtYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFDTCxPQUFPLEVBQ1AsS0FBSyxFQUNMLEtBQUssRUFDTCxVQUFVLEVBQ1YsT0FBTyxFQUNSLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUNMLFNBQVMsRUFFVCxZQUFZLEVBQ1osVUFBVSxFQUNWLEtBQUssRUFFTCxNQUFNLEVBQ04sU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBZSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR2hFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRS9FLE1BQU0sQ0FBTixJQUFZLFlBS1g7QUFMRCxXQUFZLFlBQVk7SUFDdEIsbURBQU0sQ0FBQTtJQUNOLDZEQUFXLENBQUE7SUFDWCwrREFBWSxDQUFBO0lBQ1osMkZBQTBCLENBQUE7QUFDNUIsQ0FBQyxFQUxXLFlBQVksS0FBWixZQUFZLFFBS3ZCO0FBc0JELElBQWEscUJBQXFCLDZCQUFsQyxNQUFhLHFCQUFzQixTQUFRLDRCQUFvQztJQXBCL0U7O1FBc0JFLGlCQUFZLEdBQUcsWUFBWSxDQUFDO1FBTW5CLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRWhCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3BDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ25DLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3JDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3JDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRzVD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RCxLQUFLLEVBQUUsSUFBSTthQUNaO1NBQ0Y7O0tBQ0YsQ0FBQztHQUNXLHFCQUFxQixDQXVEakM7U0F2RFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYW5pbWF0ZSxcbiAgc3RhdGUsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uLFxuICB0cmlnZ2VyXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTWF0QXV0b2NvbXBsZXRlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYXV0b2NvbXBsZXRlJztcblxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJy4uL3V0aWwvYWJzdHJhY3QtdmFsdWUtYWNjZXNzb3InO1xuXG5leHBvcnQgZW51bSBESVNQTEFZX1RZUEUge1xuICBTSU1QTEUsXG4gIEZPUk1DT05UUk9MLFxuICBBVVRPQ09NUExFVEUsXG4gIEZPUk1DT05UUk9MQU5EQVVUT0NPTVBMRVRFXG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21hdC1zZWFyY2gtYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21hdC1zZWFyY2gtYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbWF0LXNlYXJjaC1iYXIuY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ3NsaWRlSW5PdXQnLCBbXG4gICAgICBzdGF0ZSgndHJ1ZScsIHN0eWxlKHsgd2lkdGg6ICcqJyB9KSksXG4gICAgICBzdGF0ZSgnZmFsc2UnLCBzdHlsZSh7IHdpZHRoOiAnMCcgfSkpLFxuICAgICAgdHJhbnNpdGlvbigndHJ1ZSA9PiBmYWxzZScsIGFuaW1hdGUoJzMwMG1zIGVhc2UtaW4nKSksXG4gICAgICB0cmFuc2l0aW9uKCdmYWxzZSA9PiB0cnVlJywgYW5pbWF0ZSgnMzAwbXMgZWFzZS1vdXQnKSlcbiAgICBdKVxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE1hdFNlYXJjaEJhckNvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBNYXRTZWFyY2hCYXJDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdENvbnRyb2xWYWx1ZUFjY2Vzc29yPHN0cmluZz5cbiAgaW1wbGVtZW50cyBPbkluaXQge1xuICBESVNQTEFZX1RZUEUgPSBESVNQTEFZX1RZUEU7XG5cbiAgQFZpZXdDaGlsZCgnaW5wdXQnLCB7IHN0YXRpYzogZmFsc2UgfSkgaW5wdXRFbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIEBJbnB1dCgpIGZvcm1Db250cm9sOiBGb3JtQ29udHJvbDtcbiAgQElucHV0KCkgbWF0QXV0b2NvbXBsZXRlOiBNYXRBdXRvY29tcGxldGU7XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyID0gJyc7XG5cbiAgQE91dHB1dCgpIG9uQmx1ciA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBAT3V0cHV0KCkgb25DbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIG9uRW50ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQE91dHB1dCgpIG9uRm9jdXMgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQE91dHB1dCgpIG9uT3BlbiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBtb2RlOiBESVNQTEFZX1RZUEU7XG4gIHNlYXJjaFZpc2libGUgPSBmYWxzZTtcblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuZm9ybUNvbnRyb2wgJiYgIXRoaXMubWF0QXV0b2NvbXBsZXRlKVxuICAgICAgdGhpcy5tb2RlID0gRElTUExBWV9UWVBFLlNJTVBMRTtcbiAgICBlbHNlIGlmICh0aGlzLmZvcm1Db250cm9sICYmIHRoaXMubWF0QXV0b2NvbXBsZXRlKVxuICAgICAgdGhpcy5tb2RlID0gRElTUExBWV9UWVBFLkZPUk1DT05UUk9MQU5EQVVUT0NPTVBMRVRFO1xuICAgIGVsc2UgaWYgKHRoaXMuZm9ybUNvbnRyb2wpIHRoaXMubW9kZSA9IERJU1BMQVlfVFlQRS5GT1JNQ09OVFJPTDtcbiAgICBlbHNlIGlmICh0aGlzLm1hdEF1dG9jb21wbGV0ZSkgdGhpcy5tb2RlID0gRElTUExBWV9UWVBFLkFVVE9DT01QTEVURTtcbiAgfVxuXG4gIHB1YmxpYyBjbG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNlYXJjaFZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLnZhbHVlID0gJyc7XG4gICAgdGhpcy51cGRhdGVDaGFuZ2VzKCk7XG4gICAgdGhpcy5vbkNsb3NlLmVtaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBvcGVuKCk6IHZvaWQge1xuICAgIHRoaXMuc2VhcmNoVmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIHRoaXMub25PcGVuLmVtaXQoKTtcbiAgfVxuXG4gIG9uQmx1cnJpbmcoc2VhcmNoVmFsdWU6IHN0cmluZykge1xuICAgIGlmICghc2VhcmNoVmFsdWUpIHtcbiAgICAgIHRoaXMuc2VhcmNoVmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLm9uQmx1ci5lbWl0KHNlYXJjaFZhbHVlKTtcbiAgfVxuXG4gIG9uRW50ZXJyaW5nKHNlYXJjaFZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLm9uRW50ZXIuZW1pdChzZWFyY2hWYWx1ZSk7XG4gIH1cblxuICBvbkZvY3Vzc2luZyhzZWFyY2hWYWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vbkZvY3VzLmVtaXQoc2VhcmNoVmFsdWUpO1xuICB9XG59XG4iXX0=