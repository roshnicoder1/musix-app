import * as tslib_1 from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { AbstractControlValueAccessor } from '../util/abstract-value-accessor';
export var DISPLAY_TYPE;
(function (DISPLAY_TYPE) {
    DISPLAY_TYPE[DISPLAY_TYPE["SIMPLE"] = 0] = "SIMPLE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROL"] = 1] = "FORMCONTROL";
    DISPLAY_TYPE[DISPLAY_TYPE["AUTOCOMPLETE"] = 2] = "AUTOCOMPLETE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROLANDAUTOCOMPLETE"] = 3] = "FORMCONTROLANDAUTOCOMPLETE";
})(DISPLAY_TYPE || (DISPLAY_TYPE = {}));
var MatSearchBarComponent = /** @class */ (function (_super) {
    tslib_1.__extends(MatSearchBarComponent, _super);
    function MatSearchBarComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.DISPLAY_TYPE = DISPLAY_TYPE;
        _this.placeholder = '';
        _this.onBlur = new EventEmitter();
        _this.onClose = new EventEmitter();
        _this.onEnter = new EventEmitter();
        _this.onFocus = new EventEmitter();
        _this.onOpen = new EventEmitter();
        _this.searchVisible = false;
        return _this;
    }
    MatSearchBarComponent_1 = MatSearchBarComponent;
    MatSearchBarComponent.prototype.ngOnInit = function () {
        if (!this.formControl && !this.matAutocomplete)
            this.mode = DISPLAY_TYPE.SIMPLE;
        else if (this.formControl && this.matAutocomplete)
            this.mode = DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE;
        else if (this.formControl)
            this.mode = DISPLAY_TYPE.FORMCONTROL;
        else if (this.matAutocomplete)
            this.mode = DISPLAY_TYPE.AUTOCOMPLETE;
    };
    MatSearchBarComponent.prototype.close = function () {
        this.searchVisible = false;
        this.value = '';
        this.updateChanges();
        this.onClose.emit();
    };
    MatSearchBarComponent.prototype.open = function () {
        this.searchVisible = true;
        this.inputElement.nativeElement.focus();
        this.onOpen.emit();
    };
    MatSearchBarComponent.prototype.onBlurring = function (searchValue) {
        if (!searchValue) {
            this.searchVisible = false;
        }
        this.onBlur.emit(searchValue);
    };
    MatSearchBarComponent.prototype.onEnterring = function (searchValue) {
        this.onEnter.emit(searchValue);
    };
    MatSearchBarComponent.prototype.onFocussing = function (searchValue) {
        this.onFocus.emit(searchValue);
    };
    var MatSearchBarComponent_1;
    tslib_1.__decorate([
        ViewChild('input', { static: false })
    ], MatSearchBarComponent.prototype, "inputElement", void 0);
    tslib_1.__decorate([
        Input()
    ], MatSearchBarComponent.prototype, "formControl", void 0);
    tslib_1.__decorate([
        Input()
    ], MatSearchBarComponent.prototype, "matAutocomplete", void 0);
    tslib_1.__decorate([
        Input()
    ], MatSearchBarComponent.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        Output()
    ], MatSearchBarComponent.prototype, "onBlur", void 0);
    tslib_1.__decorate([
        Output()
    ], MatSearchBarComponent.prototype, "onClose", void 0);
    tslib_1.__decorate([
        Output()
    ], MatSearchBarComponent.prototype, "onEnter", void 0);
    tslib_1.__decorate([
        Output()
    ], MatSearchBarComponent.prototype, "onFocus", void 0);
    tslib_1.__decorate([
        Output()
    ], MatSearchBarComponent.prototype, "onOpen", void 0);
    MatSearchBarComponent = MatSearchBarComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'mat-search-bar',
            template: "<ng-container [ngSwitch]=\"mode\">\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.AUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROL\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchDefault\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n</ng-container>\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>\n    close\n  </mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>\n    search\n  </mat-icon>\n</span>\n",
            animations: [
                trigger('slideInOut', [
                    state('true', style({ width: '*' })),
                    state('false', style({ width: '0' })),
                    transition('true => false', animate('300ms ease-in')),
                    transition('false => true', animate('300ms ease-out'))
                ])
            ],
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return MatSearchBarComponent_1; }),
                    multi: true
                }
            ],
            styles: [":host{position:relative;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;-webkit-box-pack:end;justify-content:flex-end;width:24px;height:24px}.mat-search_field{position:absolute;z-index:1;padding:0 24px 0 0}.mat-search_icons{display:block;margin:0;padding:0;position:absolute;top:0;left:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{-webkit-transition:.2s cubic-bezier(.4,0,.2,1);transition:.2s cubic-bezier(.4,0,.2,1);position:absolute;top:0;left:0;z-index:2;border-radius:50%}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;-webkit-transform:rotate(225deg);transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;z-index:3;visibility:visible;-webkit-transform:rotate(360deg);transform:rotate(360deg)}"]
        })
    ], MatSearchBarComponent);
    return MatSearchBarComponent;
}(AbstractControlValueAccessor));
export { MatSearchBarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlYXJjaC1iYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbWF0LXNlYXJjaC1iYXIvIiwic291cmNlcyI6WyJzcmMvYXBwL25nLW1hdC1zZWFyY2gtYmFyL21hdC1zZWFyY2gtYmFyL21hdC1zZWFyY2gtYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1IsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQ0wsU0FBUyxFQUVULFlBQVksRUFDWixVQUFVLEVBQ1YsS0FBSyxFQUVMLE1BQU0sRUFDTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFlLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHaEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFL0UsTUFBTSxDQUFOLElBQVksWUFLWDtBQUxELFdBQVksWUFBWTtJQUN0QixtREFBTSxDQUFBO0lBQ04sNkRBQVcsQ0FBQTtJQUNYLCtEQUFZLENBQUE7SUFDWiwyRkFBMEIsQ0FBQTtBQUM1QixDQUFDLEVBTFcsWUFBWSxLQUFaLFlBQVksUUFLdkI7QUFzQkQ7SUFBMkMsaURBQW9DO0lBcEIvRTtRQUFBLHFFQTJFQztRQXJEQyxrQkFBWSxHQUFHLFlBQVksQ0FBQztRQU1uQixpQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUVoQixZQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUNwQyxhQUFPLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUNuQyxhQUFPLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUNyQyxhQUFPLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUNyQyxZQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUc1QyxtQkFBYSxHQUFHLEtBQUssQ0FB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QUFBLHVCQUFxQixFQUFyQixDQUFxQixDQUFDO29CQUNwRCxLQUFLLEVBQUUsSUFBSTtpQkFDWjthQUNGOztTQUNGLENBQUM7T0FDVyxxQkFBcUIsQ0F1RGpDO0lBQUQsNEJBQUM7Q0FBQSxBQXZERCxDQUEyQyw0QkFBNEIsR0F1RHRFO1NBdkRZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIHN0YXRlLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBmb3J3YXJkUmVmLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1hdEF1dG9jb21wbGV0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2F1dG9jb21wbGV0ZSc7XG5cbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICcuLi91dGlsL2Fic3RyYWN0LXZhbHVlLWFjY2Vzc29yJztcblxuZXhwb3J0IGVudW0gRElTUExBWV9UWVBFIHtcbiAgU0lNUExFLFxuICBGT1JNQ09OVFJPTCxcbiAgQVVUT0NPTVBMRVRFLFxuICBGT1JNQ09OVFJPTEFOREFVVE9DT01QTEVURVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtYXQtc2VhcmNoLWJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9tYXQtc2VhcmNoLWJhci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21hdC1zZWFyY2gtYmFyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGFuaW1hdGlvbnM6IFtcbiAgICB0cmlnZ2VyKCdzbGlkZUluT3V0JywgW1xuICAgICAgc3RhdGUoJ3RydWUnLCBzdHlsZSh7IHdpZHRoOiAnKicgfSkpLFxuICAgICAgc3RhdGUoJ2ZhbHNlJywgc3R5bGUoeyB3aWR0aDogJzAnIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJ3RydWUgPT4gZmFsc2UnLCBhbmltYXRlKCczMDBtcyBlYXNlLWluJykpLFxuICAgICAgdHJhbnNpdGlvbignZmFsc2UgPT4gdHJ1ZScsIGFuaW1hdGUoJzMwMG1zIGVhc2Utb3V0JykpXG4gICAgXSlcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNYXRTZWFyY2hCYXJDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTWF0U2VhcmNoQmFyQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RDb250cm9sVmFsdWVBY2Nlc3NvcjxzdHJpbmc+XG4gIGltcGxlbWVudHMgT25Jbml0IHtcbiAgRElTUExBWV9UWVBFID0gRElTUExBWV9UWVBFO1xuXG4gIEBWaWV3Q2hpbGQoJ2lucHV0JywgeyBzdGF0aWM6IGZhbHNlIH0pIGlucHV0RWxlbWVudDogRWxlbWVudFJlZjtcblxuICBASW5wdXQoKSBmb3JtQ29udHJvbDogRm9ybUNvbnRyb2w7XG4gIEBJbnB1dCgpIG1hdEF1dG9jb21wbGV0ZTogTWF0QXV0b2NvbXBsZXRlO1xuICBASW5wdXQoKSBwbGFjZWhvbGRlciA9ICcnO1xuXG4gIEBPdXRwdXQoKSBvbkJsdXIgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQE91dHB1dCgpIG9uQ2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBvbkVudGVyID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIEBPdXRwdXQoKSBvbkZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIEBPdXRwdXQoKSBvbk9wZW4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgbW9kZTogRElTUExBWV9UWVBFO1xuICBzZWFyY2hWaXNpYmxlID0gZmFsc2U7XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmZvcm1Db250cm9sICYmICF0aGlzLm1hdEF1dG9jb21wbGV0ZSlcbiAgICAgIHRoaXMubW9kZSA9IERJU1BMQVlfVFlQRS5TSU1QTEU7XG4gICAgZWxzZSBpZiAodGhpcy5mb3JtQ29udHJvbCAmJiB0aGlzLm1hdEF1dG9jb21wbGV0ZSlcbiAgICAgIHRoaXMubW9kZSA9IERJU1BMQVlfVFlQRS5GT1JNQ09OVFJPTEFOREFVVE9DT01QTEVURTtcbiAgICBlbHNlIGlmICh0aGlzLmZvcm1Db250cm9sKSB0aGlzLm1vZGUgPSBESVNQTEFZX1RZUEUuRk9STUNPTlRST0w7XG4gICAgZWxzZSBpZiAodGhpcy5tYXRBdXRvY29tcGxldGUpIHRoaXMubW9kZSA9IERJU1BMQVlfVFlQRS5BVVRPQ09NUExFVEU7XG4gIH1cblxuICBwdWJsaWMgY2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5zZWFyY2hWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgIHRoaXMudXBkYXRlQ2hhbmdlcygpO1xuICAgIHRoaXMub25DbG9zZS5lbWl0KCk7XG4gIH1cblxuICBwdWJsaWMgb3BlbigpOiB2b2lkIHtcbiAgICB0aGlzLnNlYXJjaFZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICB0aGlzLm9uT3Blbi5lbWl0KCk7XG4gIH1cblxuICBvbkJsdXJyaW5nKHNlYXJjaFZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAoIXNlYXJjaFZhbHVlKSB7XG4gICAgICB0aGlzLnNlYXJjaFZpc2libGUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5vbkJsdXIuZW1pdChzZWFyY2hWYWx1ZSk7XG4gIH1cblxuICBvbkVudGVycmluZyhzZWFyY2hWYWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vbkVudGVyLmVtaXQoc2VhcmNoVmFsdWUpO1xuICB9XG5cbiAgb25Gb2N1c3Npbmcoc2VhcmNoVmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMub25Gb2N1cy5lbWl0KHNlYXJjaFZhbHVlKTtcbiAgfVxufVxuIl19